{"version":3,"sources":["serviceWorker.ts","API/api.ts","utils/error-utils.ts","features/Login/login-reducer.ts","state/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","state/todolists-reducer.ts","components/AddTaskOrTodoList/AddTaskOrTodoList.tsx","components/EditableSpan/EditableSpan.tsx","state/tasks-reducer.ts","components/Todolist/Task/Task.tsx","components/Todolist/Todolist.tsx","components/TodoListsList/TodoListsList.tsx","features/Login/Login.tsx","AppWithRedux.tsx","state/redux-store.ts","index.tsx","App.module.scss","components/EditableSpan/EditableSpan.module.scss","components/Todolist/Task/Task.module.scss","features/Login/Login.module.scss"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todoListAPI","get","title","post","todoListId","delete","put","taskAPI","taskId","model","authAPI","params","handleServerAppError","response","dispatch","messages","length","setAppError","error","setAppStatus","status","handleNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","authReducer","reducer","actions","initialized","setAppInitialized","appReducer","Alert","props","elevation","variant","CustomizedSnackbars","useDispatch","handleClose","event","reason","useSelector","app","isOpen","Snackbar","open","autoHideDuration","onClose","severity","getTodoListsAC","todolists","map","tl","filter","entityStatus","addTodoListAC","unshift","todoList","changeTodoListFilterValueAC","index","findIndex","id","todoListID","changeTodoListTitleAC","deleteTodoListAC","splice","changeTodoListEntityStatusAC","todoListsReducer","AddTaskOrTodoList","React","memo","addTodoList","todoListOrAppStatus","disabled","kindForm","useState","setTitle","setError","addTask","trim","disabledForm","TextField","label","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","color","onClick","AddBox","EditableSpan","changeValueEditableSpan","taskStatus","edit","setEdit","setValue","autoFocus","onBlur","className","s","textFieldContainer","onDoubleClick","outputSpanContainer","deleteTaskAC","t","addTaskAC","task","updateTaskAC","apiModel","setTasksAC","tasks","changeTaskStatus","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","description","completed","priority","startDate","deadline","then","res","data","resultCode","catch","console","warn","Task","taskID","changeStatus","useCallback","newValue","checked","Completed","New","deleteTask","st","taskPosition","taskDone","Checkbox","aria-label","Delete","fontSize","TodoList","demo","useEffect","items","actualArrayTasks","deleteTodoList","item","finally","addTaskTC","changeTodoListTitle","setAllFilterValue","setActiveFilterValue","setCompletedFilterValue","Button","startIcon","size","style","margin","listStyle","ButtonGroup","TodoListsList","todoLists","appStatus","auth","addTodoListTC","Grid","container","padding","spacing","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","disabledBtnSubmit","justify","handleSubmit","FormControl","FormLabel","textAlign","href","target","FormGroup","getFieldProps","promptValidation","errors","type","FormControlLabel","control","AppWithRedux","isInitialized","logOut","AppBar","position","headerPosition","Toolbar","justifyContent","edge","Typography","LinearProgress","linearProgress","Container","fixed","exact","path","render","previewCircularProgress","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.db2dda83.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    headers: {\r\n        'API-KEY': '528fa1c0-cacc-47ff-ae93-32ce73ccde7f'\r\n    }\r\n})\r\n\r\nexport const todoListAPI = {\r\n    getTodoLists() {\r\n        return instance.get<Array<todoListType>>('todo-lists')\r\n    },\r\n\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{item: todoListType}>>(`todo-lists`, {title})\r\n    },\r\n\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todoListId}`)\r\n    },\r\n\r\n    updateTodoList (todoListId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todoListId}`, {title})\r\n    }\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTask(todoListId: string) {\r\n        return instance.get<tasksType>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n\r\n    addTask(todoListId: string, title: string) {\r\n        return instance.post<ResponseType<{item: taskType}>>(`todo-lists/${todoListId}/tasks`, {title: title})\r\n    },\r\n\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n\r\n    updateTask(todoListId: string, taskId: string, model: updateTaskModelType) {\r\n        return instance.put<ResponseType<{item: taskType}>>(`todo-lists/${todoListId}/tasks/${taskId}`, {...model})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(params: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', {...params})\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType<{}>>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('/auth/me')\r\n    }\r\n}\r\n\r\n//types\r\ntype todoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D> = {\r\n    data: D\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\nexport type taskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype tasksType = {\r\n    items: Array<taskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type updateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    inProgress = 1,\r\n    Completed = 2,\r\n    draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n\r\n\r\n","import {setAppError, setAppStatus} from \"../state/app-reducer\";\r\nimport {ResponseType} from \"../API/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype handleServerAppErrorDispatchType = ReturnType<typeof setAppError> | ReturnType<typeof setAppStatus>\r\nexport const handleServerAppError = <D>(response: ResponseType<D>, dispatch: Dispatch<handleServerAppErrorDispatchType>) => {\r\n    if (response.messages.length) {\r\n        dispatch(setAppError({error: response.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'some server error'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleNetworkError = (error: {message: string}, dispatch: Dispatch<handleServerAppErrorDispatchType>) => {\r\n    dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatus({status: 'idle'}))\r\n}","import {setAppStatus} from \"../../state/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../API/api\";\r\nimport {handleNetworkError, handleServerAppError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{isLoggedIn: boolean}>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n//thunks\r\nexport const loginTC = (params: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    authAPI.login(params)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                dispatch(setIsLoggedIn({isLoggedIn: false}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {authAPI} from \"../API/api\";\r\nimport {handleNetworkError, handleServerAppError} from \"../utils/error-utils\";\r\nimport {setIsLoggedIn} from \"../features/Login/login-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    initialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: statusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{ error: null | string }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitialized(state, action: PayloadAction<{ initialized: boolean }>) {\r\n            state.initialized = action.payload.initialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatus, setAppError, setAppInitialized} = slice.actions\r\n\r\nexport const appInitialized = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setAppInitialized({initialized: true}))\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\nexport type statusType = 'idle' | 'loading' | 'succeeded' | 'addition' | 'failed'\r\nexport type InitialStateType = {\r\n    status: statusType\r\n    error: string | null\r\n    initialized: boolean\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../state/redux-store\";\r\nimport {setAppError} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function CustomizedSnackbars() {\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppError({error: null}))\r\n    };\r\n\r\n    const error = useSelector<AppRootState, string | null>(state => state.app.error)\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import {todoListAPI} from \"../API/api\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {handleNetworkError, handleServerAppError} from \"../utils/error-utils\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport let initialState: Array<todoListDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        getTodoListsAC(state, action: PayloadAction<{ todolists: Array<TodoListType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"new\"}))\r\n        },\r\n        addTodoListAC(state, action: PayloadAction<{ todoList: TodoListType }>) {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: \"new\"})\r\n        },\r\n        changeTodoListFilterValueAC(state, action: PayloadAction<{ todoListID: string, filter: FilterType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListID)\r\n            if (index > -1) state[index].filter = action.payload.filter\r\n        },\r\n        changeTodoListTitleAC(state, action: PayloadAction<{ todoListId: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            if (index > -1) state[index].title = action.payload.title\r\n        },\r\n        deleteTodoListAC(state, action: PayloadAction<{ todoListId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            if (index > -1) state.splice(index, 1)\r\n        },\r\n        changeTodoListEntityStatusAC(state, action: PayloadAction<{ todoListId: string, entityStatus: todoListStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            if (index > -1) state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    }\r\n})\r\n\r\nexport const todoListsReducer = slice.reducer\r\nexport const {\r\n    getTodoListsAC, addTodoListAC, changeTodoListFilterValueAC,\r\n    changeTodoListTitleAC, deleteTodoListAC, changeTodoListEntityStatusAC\r\n} = slice.actions\r\n\r\n//thunks\r\nexport const getTodoListsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todoListAPI.getTodoLists()\r\n        .then(res => {\r\n            dispatch(getTodoListsAC({todolists: res.data}))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const deleteTodoListTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodoListEntityStatusAC({todoListId, entityStatus: 'deletion'},))\r\n    todoListAPI.deleteTodoList(todoListId)\r\n        .then(res => {\r\n            dispatch(deleteTodoListAC({todoListId}))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    todoListAPI.updateTodoList(todoListId, title)\r\n        .then(res => dispatch(changeTodoListTitleAC({todoListId, title})))\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'addition'}))\r\n    todoListAPI.createTodoList(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodoListAC({todoList: res.data.data.item}))\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\n\r\n//types\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    title: string\r\n    order: number\r\n}\r\nexport type todoListStatusType = 'new' | 'addition' | 'deletion' | 'succeeded'\r\nexport type todoListDomainType = TodoListType & {\r\n    filter: FilterType\r\n    entityStatus: todoListStatusType\r\n}\r\n\r\n\r\n// type ChangeTodoListNameType = {\r\n//     type: 'CHANGE-TODOLIST-NAME'\r\n//     title: string\r\n//     idTodoList: string\r\n// }\r\n//\r\n// export type AddTodoListType = {\r\n//     type: 'ADD-NEW-TODOLIST'\r\n//     title: string\r\n//     todoListId: string\r\n// }\r\n//\r\n// export type DeleteTodoListType = {\r\n//     type: 'DELETE-TODOLIST'\r\n//     todoListID: string\r\n// }\r\n//\r\n// type ChangeFilterValueType = {\r\n//     type: 'CHANGE-FILTER-VALUE'\r\n//     idTodoList: string\r\n//     value: FilterType\r\n// }\r\n//\r\n// type ActionsType = ChangeTodoListNameType | AddTodoListType | DeleteTodoListType | ChangeFilterValueType\r\n//\r\n// export const todoListsReducer = (state: Array<TodoListType>, action: ActionsType): Array<TodoListType> => {\r\n//     switch (action.type) {\r\n//         case \"CHANGE-TODOLIST-NAME\":\r\n//             return state.map(tl => tl.id === action.idTodoList ? {...tl, title: action.title} : tl)\r\n//         case \"ADD-NEW-TODOLIST\":\r\n//             return [\r\n//                 ...state,\r\n//                 {\r\n//                     id: action.todoListId,\r\n//                     title: action.title,\r\n//                     filter: \"all\"\r\n//                 }\r\n//             ]\r\n//         case \"DELETE-TODOLIST\":\r\n//             return state.filter(tl => tl.id !== action.todoListID)\r\n//         case \"CHANGE-FILTER-VALUE\":\r\n//             return state.map(tl => tl.id === action.idTodoList ? {...tl, filter: action.value} : tl)\r\n//\r\n//         default:\r\n//             throw new Error('What\\'s mean here?')\r\n//     }\r\n// }\r\n//\r\n// export const RemoveTodoListAC = (todoListID: string): DeleteTodoListType => {\r\n//     return {\r\n//         type: 'DELETE-TODOLIST',\r\n//         todoListID\r\n//     }\r\n// }\r\n//\r\n// export const AddTodoListTypeAC = (title: string): AddTodoListType => {\r\n//     return {\r\n//         type: 'ADD-NEW-TODOLIST',\r\n//         title,\r\n//         todoListId: v1()\r\n//     }\r\n// }\r\n//\r\n// export const ChangeFilterValueTypeAC = (idTodoList: string, value: FilterType): ChangeFilterValueType => {\r\n//     return {\r\n//         type: 'CHANGE-FILTER-VALUE',\r\n//         idTodoList,\r\n//         value\r\n//     }\r\n// }\r\n//\r\n// export const ChangeTodoListNameTypeAC = (idTodoList: string, title: string): ChangeTodoListNameType => {\r\n//     return {\r\n//         type: 'CHANGE-TODOLIST-NAME',\r\n//         title,\r\n//         idTodoList\r\n//     }\r\n// }\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {statusType} from \"../../state/app-reducer\";\r\nimport {todoListStatusType} from \"../../state/todolists-reducer\";\r\n\r\ntype AddTaskOrTodoListPropsType = {\r\n    addTodoList: (title: string) => void\r\n    disabled?: boolean\r\n    todoListOrAppStatus: todoListStatusType | statusType\r\n    kindForm: 'task' | 'todoList'\r\n}\r\n\r\nexport const AddTaskOrTodoList = React.memo(({addTodoList, disabled = false, todoListOrAppStatus, kindForm, ...restProps}: AddTaskOrTodoListPropsType) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const onChangeTask = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(\"\")\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim()) {\r\n            addTodoList(title)\r\n            setTitle('')\r\n            setError('')\r\n        } else {\r\n            setError('Incorrect value')\r\n        }\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => e.key === 'Enter' && addTask()\r\n\r\n    const disabledForm = todoListOrAppStatus === 'addition' &&  kindForm ==='task'\r\n        || todoListOrAppStatus === 'addition' && kindForm === 'todoList'\r\n        || todoListOrAppStatus === 'deletion'\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n                       label=\"Title\"\r\n                       value={title}\r\n                       onChange={onChangeTask}\r\n                       onKeyPress={onKeyPressAddTask}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       disabled={disabledForm}\r\n            />\r\n\r\n            <IconButton color=\"primary\" onClick={addTask} disabled={disabledForm}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {statusType} from \"../../state/app-reducer\";\r\nimport {taskStatusType} from \"../../state/tasks-reducer\";\r\nimport s from './EditableSpan.module.scss'\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeValueEditableSpan: (value: string) => void\r\n    taskStatus: taskStatusType | statusType\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeValueEditableSpan, taskStatus, ...restProps}: EditableSpanPropsType) => {\r\n    const [edit, setEdit] = useState(false)\r\n    const [value, setValue] = useState('')\r\n\r\n    const changeInput = () => {\r\n        setEdit(true)\r\n        setValue(title)\r\n    }\r\n    const changeSpan = () => {\r\n        setEdit(false)\r\n        changeValueEditableSpan(value)\r\n    }\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => setValue(e.currentTarget.value)\r\n\r\n    return (\r\n        edit\r\n            ?\r\n            <TextField\r\n                autoFocus\r\n                onBlur={changeSpan}\r\n                value={value}\r\n                onChange={changeValue}\r\n                disabled={taskStatus === 'deletion'}\r\n                className={s.textFieldContainer}\r\n            />\r\n            :\r\n            <span onDoubleClick={changeInput} className={s.outputSpanContainer}>{title}</span>\r\n    )\r\n})","import {addTodoListAC, changeTodoListEntityStatusAC, deleteTodoListAC, getTodoListsAC} from \"./todolists-reducer\";\r\nimport {taskAPI, taskType, updateTaskModelType} from \"../API/api\";\r\nimport {AppRootState} from \"./redux-store\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {handleNetworkError, handleServerAppError} from \"../utils/error-utils\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport let initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        deleteTaskAC(state, action: PayloadAction<{ taskId: string, todoListId: string }>) {\r\n            let index = state[action.payload.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) state[action.payload.todoListId].splice(index, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: taskType }>) {\r\n            state[action.payload.task.todoListId].unshift({...action.payload.task, taskStatus: 'new'})\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ todoListId: string, taskId: string, apiModel: updateTaskModelType }>) {\r\n            let task = state[action.payload.todoListId]\r\n            let index = task.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) task[index] = {...task[index], ...action.payload.apiModel}\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<taskType>, todoListId: string }>) {\r\n            state[action.payload.todoListId] = action.payload.tasks.map(t => ({...t, taskStatus: 'new'}))\r\n        },\r\n        changeTaskStatus(state, action: PayloadAction<{ taskStatus: taskStatusType, todoListId: string, taskId: string }>) {\r\n            let task = state[action.payload.todoListId]\r\n            let index = task.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) task[index].taskStatus = action.payload.taskStatus\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.todoList.id] = []\r\n        })\r\n        builder.addCase(getTodoListsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(deleteTodoListAC, (state, action) => {\r\n            delete state[action.payload.todoListId]\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {deleteTaskAC, addTaskAC, updateTaskAC, setTasksAC, changeTaskStatus} = slice.actions\r\n\r\n//thunks\r\nexport const setTasksTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    taskAPI.getTask(todoListId)\r\n        .then(res => {\r\n            dispatch(setTasksAC({todoListId, tasks: res.data.items}))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const deleteTaskTC = (todoListId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeTaskStatus({todoListId, taskId, taskStatus: 'deletion'}))\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    taskAPI.deleteTask(todoListId, taskId)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC({taskId, todoListId}))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const addTaskTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodoListEntityStatusAC({todoListId, entityStatus: 'addition'}))\r\n    taskAPI.addTask(todoListId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: res.data.data.item}))\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                dispatch(changeTodoListEntityStatusAC({entityStatus: 'succeeded', todoListId}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTodoListEntityStatusAC({entityStatus: 'succeeded', todoListId}))\r\n        })\r\n}\r\n\r\nexport type updateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    completed?: boolean\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTaskTC = (todoListId: string, taskId: string, domainModel: updateDomainTaskModelType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootState) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        dispatch(changeTaskStatus({todoListId, taskId, taskStatus: 'edition'}))\r\n        const state = getState().tasks[todoListId].find(t => t.id === taskId)\r\n\r\n        if (!state) {\r\n            console.warn('Task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: updateTaskModelType = {\r\n            title: state.title,\r\n            description: state.description,\r\n            completed: state.completed,\r\n            status: state.status,\r\n            priority: state.priority,\r\n            startDate: state.startDate,\r\n            deadline: state.deadline,\r\n            ...domainModel\r\n        }\r\n\r\n        taskAPI.updateTask(todoListId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskId, todoListId, apiModel}))\r\n                    dispatch(changeTaskStatus({todoListId, taskId, taskStatus: 'succeeded'}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n//types\r\nexport type taskStatusType = 'new' | 'addition' | 'deletion' | 'edition' | 'succeeded'\r\nexport type TaskWideVersionType = taskType & {\r\n    taskStatus: taskStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskWideVersionType>\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {deleteTaskTC, TaskWideVersionType, updateTaskTC} from \"../../../state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses} from \"../../../API/api\";\r\nimport st from './Task.module.scss'\r\n\r\ntype TaskPropsType = {\r\n    todoListID: string\r\n    taskID: string\r\n    task: TaskWideVersionType\r\n}\r\n\r\nexport const Task = React.memo(({todoListID, taskID, task, ...restProps}: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = e.currentTarget.checked\r\n\r\n        dispatch(updateTaskTC(todoListID, taskID, {status: newValue ? TaskStatuses.Completed : TaskStatuses.New}))\r\n    }, [dispatch, taskID, todoListID])\r\n    const deleteTask = useCallback(() => dispatch(deleteTaskTC(todoListID, taskID)), [dispatch, taskID, todoListID])\r\n    const changeValueEditableSpan = useCallback((title: string) => {\r\n        dispatch(updateTaskTC(todoListID, taskID, {title}))\r\n    }, [dispatch, taskID, todoListID])\r\n\r\n    return (\r\n        <li key={taskID} className={`${st.taskPosition} ${task.status === TaskStatuses.Completed ? st.taskDone : ''}`}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed} onChange={changeStatus} disabled={task.taskStatus === 'deletion' || task.taskStatus === 'edition'}/>\r\n\r\n            <EditableSpan title={task.title} changeValueEditableSpan={changeValueEditableSpan} taskStatus={task.taskStatus}/>\r\n\r\n            <IconButton aria-label=\"delete\" onClick={deleteTask} disabled={task.taskStatus === 'deletion'}>\r\n                <Delete fontSize=\"small\"/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport \"../../App.module.scss\"\r\nimport {AddTaskOrTodoList} from \"../AddTaskOrTodoList/AddTaskOrTodoList\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {addTaskTC, setTasksTC, TasksStateType} from \"../../state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterValueAC,\r\n    changeTodoListTitleTC,\r\n    deleteTodoListTC,\r\n    todoListDomainType\r\n} from \"../../state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../state/redux-store\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses} from \"../../API/api\";\r\n\r\ntype TodoListPropsType = {\r\n    todoList: todoListDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(({todoList, demo = false,...restProps}: TodoListPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTasksTC(todoList.id))\r\n    }, [dispatch, todoList.id])\r\n\r\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\r\n    let actualArrayTasks = tasks[todoList.id]\r\n    if (todoList.filter === 'active') {\r\n        actualArrayTasks = actualArrayTasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todoList.filter === 'completed') {\r\n        actualArrayTasks = actualArrayTasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const deleteTodoList = useCallback(() => dispatch(deleteTodoListTC(todoList.id)), [dispatch, todoList.id])\r\n    const addTask = useCallback((title: string) => dispatch(addTaskTC(todoList.id, title)), [dispatch, todoList.id])\r\n    const changeTodoListTitle = useCallback((value: string) => dispatch(changeTodoListTitleTC(todoList.id, value)), [dispatch, todoList.id])\r\n    const setAllFilterValue = useCallback(() => dispatch(changeTodoListFilterValueAC({todoListID: todoList.id, filter: 'all'} )), [dispatch, todoList.id])\r\n    const setActiveFilterValue = useCallback(() => dispatch(changeTodoListFilterValueAC({todoListID: todoList.id, filter: 'active'})), [dispatch, todoList.id])\r\n    const setCompletedFilterValue = useCallback(() => dispatch(changeTodoListFilterValueAC({todoListID: todoList.id, filter: 'completed'})), [dispatch, todoList.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todoList.title} changeValueEditableSpan={changeTodoListTitle} taskStatus={todoList.entityStatus}/>\r\n\r\n                <Button onClick={deleteTodoList}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        startIcon={<Delete/>}\r\n                        size=\"small\"\r\n                        style={{margin: \"0 10px\"}}\r\n                        disabled={todoList.entityStatus === 'deletion'}\r\n                >\r\n                    Delete\r\n                </Button>\r\n            </h3>\r\n\r\n            <AddTaskOrTodoList addTodoList={addTask} todoListOrAppStatus={todoList.entityStatus} kindForm={'task'}/>\r\n\r\n            <ul style={{listStyle: \"none\"}}>\r\n                {actualArrayTasks.map(t => <Task\r\n                    key={t.id}\r\n                    todoListID={todoList.id}\r\n                    taskID={t.id}\r\n                    task={t}\r\n                />)}\r\n            </ul>\r\n\r\n            <div>\r\n                <ButtonGroup variant=\"contained\" color=\"primary\">\r\n                    <Button onClick={setAllFilterValue}>All</Button>\r\n                    <Button onClick={setActiveFilterValue}>Active</Button>\r\n                    <Button onClick={setCompletedFilterValue}>Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../state/redux-store\";\r\nimport {addTodoListTC, getTodoListsTC, todoListDomainType} from \"../../state/todolists-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {TodoList} from \"../Todolist/Todolist\";\r\nimport {AddTaskOrTodoList} from \"../AddTaskOrTodoList/AddTaskOrTodoList\";\r\nimport {statusType} from \"../../state/app-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoListsList: React.FC<PropsType> = React.memo(({demo = false, ...restProps}) => {\r\n    const todoLists = useSelector<AppRootState, Array<todoListDomainType>>(state => state.todoLists)\r\n    const appStatus = useSelector<AppRootState, statusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getTodoListsTC())\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container style={{padding: \"10px 0\"}}>\r\n                <AddTaskOrTodoList addTodoList={addTodoList} todoListOrAppStatus={appStatus} kindForm={'todoList'}/>\r\n            </Grid>\r\n\r\n            <Grid container spacing={4}>\r\n                {\r\n                    todoLists.map((tl) =>\r\n                        <Grid item key={tl.id}>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <TodoList todoList={tl}\r\n                                          demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {CustomizedSnackbars} from \"../../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport st from './Login.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./login-reducer\";\r\nimport {AppRootState} from \"../../state/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'password is required'\r\n                }\r\n            }\r\n\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'email is required'\r\n                }\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                return {\r\n                    email: 'Invalid email address'\r\n                }\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n\r\n    const disabledBtnSubmit = !formik.values.email || !formik.values.password\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel style={{textAlign: 'center'}}>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <div className={st.promptValidation}>{formik.errors.email ? formik.errors.email : ''}</div>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        <div\r\n                            className={st.promptValidation}>{formik.errors.password ? formik.errors.password : ''}</div>\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button disabled={disabledBtnSubmit} type={'submit'} variant={'contained'}\r\n                                color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n        <CustomizedSnackbars/>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from \"react\";\r\nimport s from \"./App.module.scss\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/redux-store\";\r\nimport {CustomizedSnackbars} from \"./components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {appInitialized, statusType} from \"./state/app-reducer\";\r\nimport {TodoListsList} from \"./components/TodoListsList/TodoListsList\";\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./features/Login/Login\";\r\nimport {logout} from \"./features/Login/login-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction AppWithRedux({demo = false, ...restProps}: PropsType) {\r\n    const status = useSelector<AppRootState, statusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootState, boolean>(state => state.app.initialized)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(appInitialized())\r\n    }, [])\r\n\r\n    const logOut = useCallback(() => {\r\n        dispatch(logout())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div className={s.previewCircularProgress}>\r\n            <CircularProgress color=\"secondary\"/>\r\n        </div>\r\n    }\r\n    return (\r\n        <HashRouter>\r\n            <div className={s.app}>\r\n                <AppBar position=\"static\" className={s.headerPosition}>\r\n                    <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n\r\n                        <Typography variant=\"h6\">\r\n                            TodoLists\r\n                        </Typography>\r\n\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logOut}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress className={s.linearProgress}/>}\r\n                </AppBar>\r\n                <CustomizedSnackbars/>\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodoListsList demo={demo}/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'*'} render={() => <h1>PAGE NOT FOUND</h1>}/>\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers} from \"redux\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from \"redux-thunk\"\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/login-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk),\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/redux-store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"App_isDone__cFwf-\",\"app\":\"App_app__3M1zD\",\"headerPosition\":\"App_headerPosition__3VhUp\",\"linearProgress\":\"App_linearProgress__2Okxf\",\"previewCircularProgress\":\"App_previewCircularProgress__1pFTr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputSpanContainer\":\"EditableSpan_outputSpanContainer__3AcMO\",\"textFieldContainer\":\"EditableSpan_textFieldContainer__3Z4MY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskPosition\":\"Task_taskPosition__1dZmT\",\"taskDone\":\"Task_taskDone__1j_LX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"promptValidation\":\"Login_promptValidation__3PrWS\"};"],"sourceRoot":""}